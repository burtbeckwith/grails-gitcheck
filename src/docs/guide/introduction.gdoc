This plugin provides the ability to check git status of a local repository on
war file generation.

It can be used to ensure your changes are committed and pushed as well as your
project is current while generating a war file.

The following tests are performed:

* Check for valid branch name
* Check for uncommitted changes
* Check for unpushed change sets
* Check for unpulled origin change sets

h4. Configuration
You can control the plugin behavior by the following configuration options (usually set in Config.groovy):

* scm.validBranch - The valid branch name(s) for this build
* scm.skipGitBranchCheck - If true, do not perform the Git branch check \[false\]
* scm.skipGitCommitCheck - If true, do not perform uncommitted changes check. \[false\]
* scm.skipGitPushedCheck - If true, do not perform unpushed change sets check. \[false\]
* scm.skipGitOriginCheck - If true, perform origin unpulled change sets check. \[false\]

You can set the gitcheck properties as usual on a per-Environment base.
Example:

{code}
scm.validBranch = 'master' // default branch

development {
    scm.skipGitCommitCheck = true
    scm.skipGitPushedCheck = true
    scm.skipGitOriginCheck = true
}

ci {
    scm.validBranch = 'ci'
}

testserver1 {
    scm.validBranch = 'deploy/testserver1'
    scm.skipGitPushedCheck = true // just an example
}


production {
    scm.validBranch = 'deploy/production'
}

{code}

h4. Current Revision
You can import the GitClient into your BuildConfig.groovy to get access to the current Git revision.
This can be used to add the Git revision e.g. to the war file name:

{code}

import grails.plugin.gitcheck.GitClient

def currentDate = {
  new Date().format("yyyy_MM_dd")
}

def gitRev = GitClient.currentRevision()

grails.project.war.file = "target/${appName}-${Environment.current.name}-${currentDate()}-${gitRev}.war"

{code}

h4. Release History and Acknowledgment
* July, 3rd, 2013
 * Cleanup BuildConfig
* July 2nd, 2013
** 0.1 initial release.
** [JIRA Issues|http://jira.grails.org/browse/GRAILSPLUGINS]
